{"version":3,"sources":["components/TodoInput/TodoInput.module.css","components/TodoList/TodoItem/TodoItem.module.css","components/TodoList/TodoList.module.css","context/todo-context.jsx","components/TodoInput/TodoInput.js","components/TodoList/TodoItem/TodoItem.js","components/TodoList/TodoList.js","context/todo-action.jsx","context/todo-reducer.jsx","context/TodoState.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","todoContext","createContext","TodoInput","useState","todo","setTodo","addTodo","useContext","className","styles","todoInput","todoInput__title","onSubmit","e","preventDefault","newTodo","id","Math","random","text","complete","todoInput__form","todoInput__input","type","value","placeholder","onChange","target","todoInput__submitBtn","TodoItem","clickToToggle","clickToDelete","todoItem","todoItem__text","style","color","todoItem__toggleBtn","onClick","todoItem__deleteBtn","TodoList","todos","toggleTodo","deleteTodo","todoList","todoList__title","todoList__todos","map","ADD_TODO","TOGGLE_TODO","DELETE_TODO","todoReducer","state","action","payload","filter","TodoState","props","useReducer","dispatch","Provider","todoID","children","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,UAAY,6BAA6B,iBAAmB,oCAAoC,gBAAkB,mCAAmC,iBAAmB,oCAAoC,qBAAuB,0C,iBCArPD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,eAAiB,iCAAiC,oBAAsB,sCAAsC,oBAAsB,wC,kBCA5LD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,gBAAkB,kCAAkC,gBAAkB,oC,2JCG/GC,EAFKC,0B,OC6CLC,EA3CG,WAAO,IAAD,EACIC,mBAAS,IADb,mBACdC,EADc,KACRC,EADQ,KAGdC,EAAYC,qBAAWP,GAAvBM,QAqBR,OACE,sBAAKE,UAAWC,IAAOC,UAAvB,UACE,oBAAIF,UAAWC,IAAOE,iBAAtB,gDAGA,uBAAMC,SApBc,SAACC,GACvBA,EAAEC,iBAGF,IAAMC,EAAU,CACdC,GAAIC,KAAKC,SACTC,KAAMf,EACNgB,UAAU,GAGZd,EAAQS,GAERV,EAAQ,KAQ2BG,UAAWC,IAAOY,gBAAnD,UACE,uBACEb,UAAWC,IAAOa,iBAClBC,KAAK,OACLC,MAAOpB,EACPqB,YAAY,kBACZC,SA9BgB,SAACb,GACvBR,EAAQQ,EAAEc,OAAOH,UA+Bb,wBAAQhB,UAAWC,IAAOmB,qBAA1B,wB,gCCjBOC,EArBE,SAAC,GAAsD,IAApDV,EAAmD,EAAnDA,KAAMW,EAA6C,EAA7CA,cAAeC,EAA8B,EAA9BA,cAAeX,EAAe,EAAfA,SACtD,OACE,sBAAKZ,UAAWC,IAAOuB,SAAvB,UACE,sBACExB,UAAWC,IAAOwB,eAClBC,MAAO,CAAEC,MAAOf,EAAW,QAAU,OAFvC,SAIGD,IAEH,gCACE,wBAAQX,UAAWC,IAAO2B,oBAAqBC,QAASP,EAAxD,oBAGA,wBAAQtB,UAAWC,IAAO6B,oBAAqBD,QAASN,EAAxD,2BCQOQ,EAlBE,WAAO,IAAD,EACqBhC,qBAAWP,GAA7CwC,EADa,EACbA,MAAOC,EADM,EACNA,WAAYC,EADN,EACMA,WAE3B,OACE,sBAAKlC,UAAWC,IAAOkC,SAAvB,UACE,oBAAInC,UAAWC,IAAOmC,gBAAtB,oBACA,qBAAKpC,UAAWC,IAAOoC,gBAAvB,SACGL,EAAMM,KAAI,SAAA1C,GAAI,OACb,cAAC,EAAD,CAAwBe,KAAMf,EAAKe,KACjCC,SAAUhB,EAAKgB,SACfU,cAAe,kBAAMW,EAAWrC,EAAKY,KACrCe,cAAe,kBAAMW,EAAWtC,EAAKY,MAHxBZ,EAAKY,a,eCdjB+B,EAAW,WACXC,EAAc,cACdC,EAAc,cCuBZC,EAvBK,SAACC,EAAOC,GACxB,OAAQA,EAAO7B,MACX,KAAKwB,EACD,MAAO,CACHP,MAAM,GAAD,mBAAOW,EAAMX,OAAb,CAAoBY,EAAOC,WAExC,KAAKL,EACD,MAAO,CACHR,MAAOW,EAAMX,MAAMM,KAAI,SAAA1C,GAAI,OACvBA,EAAKY,KAAOoC,EAAOC,QAAnB,2BACSjD,GADT,IACegB,UAAWhB,EAAKgB,WACzBhB,MAGlB,KAAK6C,EACD,MAAO,CACHT,MAAOW,EAAMX,MAAMc,QAAO,SAAAlD,GAAI,OAAIA,EAAKY,KAAOoC,EAAOC,YAE7D,QACI,OAAOF,IC6BJI,EA1CG,SAACC,GAEf,IAFyB,EAKGC,qBAAWP,EAHlB,CACjBV,MAAO,KAHc,mBAKjBW,EALiB,KAKVO,EALU,KA6BzB,OACI,cAAC,EAAYC,SAAb,CACInC,MAAO,CACHgB,MAAOW,EAAMX,MACblC,QAzBI,SAACF,GACbsD,EAAS,CACLnC,KAAMwB,EACNM,QAASjD,KAuBLqC,WAnBO,SAACmB,GAChBF,EAAS,CACLnC,KAAMyB,EACNK,QAASO,KAiBLlB,WAbO,SAACkB,GAChBF,EAAS,CACLnC,KAAM0B,EACNI,QAASO,MAKb,SAOKJ,EAAMK,YC1BJC,MAbf,WACE,OACE,qBAAKtD,UAAU,MAAf,SACE,qBAAKA,UAAU,eAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,YCAUuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1caf3562.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoInput\":\"TodoInput_todoInput__1xTSM\",\"todoInput__title\":\"TodoInput_todoInput__title__17cQn\",\"todoInput__form\":\"TodoInput_todoInput__form__3_jq5\",\"todoInput__input\":\"TodoInput_todoInput__input__3MCK5\",\"todoInput__submitBtn\":\"TodoInput_todoInput__submitBtn__2jOui\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoItem\":\"TodoItem_todoItem__2i6L7\",\"todoItem__text\":\"TodoItem_todoItem__text__2Zs4V\",\"todoItem__toggleBtn\":\"TodoItem_todoItem__toggleBtn__3wB8K\",\"todoItem__deleteBtn\":\"TodoItem_todoItem__deleteBtn__8tMgA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todoList\":\"TodoList_todoList__1KsE9\",\"todoList__title\":\"TodoList_todoList__title__3U3o7\",\"todoList__todos\":\"TodoList_todoList__todos__WoMpU\"};","import { createContext } from 'react';\n\nconst todoContext = createContext();\n\nexport default todoContext;","import React, { useState, useContext } from \"react\";\nimport styles from \"./TodoInput.module.css\";\nimport todoContext from '../../context/todo-context';\n\nconst TodoInput = () => {\n  const [ todo, setTodo ] = useState('');\n\n  const { addTodo } = useContext(todoContext);\n\n  const onChangeHandler = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    // {id: 111, text: 'Some text', complete: false}\n    const newTodo = {\n      id: Math.random(),\n      text: todo,\n      complete: false,\n    };\n\n    addTodo(newTodo)\n\n    setTodo('');\n  };\n\n  return (\n    <div className={styles.todoInput}>\n      <h3 className={styles.todoInput__title}>\n        useCONTEXT + useREDUCER TO-DO LIST\n      </h3>\n      <form onSubmit={onSubmitHandler} className={styles.todoInput__form}>\n        <input\n          className={styles.todoInput__input}\n          type=\"text\"\n          value={todo}\n          placeholder=\"Enter a Todo...\"\n          onChange={onChangeHandler}\n        />\n        <button className={styles.todoInput__submitBtn}>ADD</button>\n      </form>\n    </div>\n  );\n};\n\nexport default TodoInput;\n","import React from \"react\";\nimport styles from \"./TodoItem.module.css\";\n\nconst TodoItem = ({ text, clickToToggle, clickToDelete, complete }) => {\n  return (\n    <div className={styles.todoItem}>\n      <span\n        className={styles.todoItem__text}\n        style={{ color: complete ? \"green\" : \"red\" }}\n      >\n        {text}\n      </span>\n      <div>\n        <button className={styles.todoItem__toggleBtn} onClick={clickToToggle}>\n          TOGGLE\n        </button>\n        <button className={styles.todoItem__deleteBtn} onClick={clickToDelete}>\n          DELETE\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default TodoItem;\n","import React, { useContext } from \"react\";\nimport styles from \"./TodoList.module.css\";\n\nimport todoContext from '../../context/todo-context';\nimport TodoItem from \"./TodoItem/TodoItem\";\n\nconst TodoList = () => {\n  const { todos, toggleTodo, deleteTodo } = useContext(todoContext);\n\n  return (\n    <div className={styles.todoList}>\n      <h3 className={styles.todoList__title}>TO-DOS</h3>\n      <div className={styles.todoList__todos}>\n        {todos.map(todo => (\n          <TodoItem key={todo.id} text={todo.text}\n            complete={todo.complete}\n            clickToToggle={() => toggleTodo(todo.id)}\n            clickToDelete={() => deleteTodo(todo.id)} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default TodoList;\n","export const ADD_TODO = 'ADD_TODO';\nexport const TOGGLE_TODO = 'TOGGLE_TODO';\nexport const DELETE_TODO = 'DELETE_TODO';","import { ADD_TODO, TOGGLE_TODO, DELETE_TODO } from './todo-action';\n\nconst todoReducer = (state, action) => {\n    switch (action.type) {\n        case ADD_TODO:\n            return {\n                todos: [ ...state.todos, action.payload ]\n            }\n        case TOGGLE_TODO:\n            return {\n                todos: state.todos.map(todo =>\n                    todo.id === action.payload ?\n                        { ...todo, complete: !todo.complete }\n                        : todo\n                )\n            }\n        case DELETE_TODO:\n            return {\n                todos: state.todos.filter(todo => todo.id !== action.payload)\n            }\n        default:\n            return state;\n    }\n}\n\nexport default todoReducer;","import React, { useReducer } from 'react'\nimport TodoContext from './todo-context';\nimport todoReducer from './todo-reducer';\nimport { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from './todo-action';\n\n// const result = localStorage.getItem('todo')\n// console.log(result);\n\nconst TodoState = (props) => {\n\n    const initialState = {\n        todos: []\n    }\n    const [ state, dispatch ] = useReducer(todoReducer, initialState);\n    // console.log(state);\n\n    const addTodo = (todo) => {\n        dispatch({\n            type: ADD_TODO,\n            payload: todo\n        })\n    }\n    //toggle todo\n    const toggleTodo = (todoID) => {\n        dispatch({\n            type: TOGGLE_TODO,\n            payload: todoID\n        })\n    }\n    //delete todo\n    const deleteTodo = (todoID) => {\n        dispatch({\n            type: DELETE_TODO,\n            payload: todoID\n        })\n    }\n\n    return (\n        <TodoContext.Provider\n            value={{\n                todos: state.todos,\n                addTodo,\n                toggleTodo,\n                deleteTodo\n            }}>\n            {props.children}\n        </TodoContext.Provider>\n    )\n}\n\nexport default TodoState\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoInput from \"./components/TodoInput/TodoInput\";\nimport TodoList from \"./components/TodoList/TodoList\";\nimport TodoState from './context/TodoState';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__todoApp\">\n        <TodoState>\n          <TodoInput />\n          <TodoList />\n        </TodoState>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}